/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root';
import { Route as DefinitionsRouteRouteImport } from './routes/definitions/route';
import { Route as IndexRouteImport } from './routes/index';
import { Route as DefinitionsIndexRouteImport } from './routes/definitions/index';
import { Route as DefinitionsCreateIndexRouteImport } from './routes/definitions/create/index';
import { Route as DefinitionsDefinitionIdIndexRouteImport } from './routes/definitions/$definitionId/index';
import { Route as DefinitionsDefinitionIdRuntimeRuntimeIdIndexRouteImport } from './routes/definitions/$definitionId/runtime/$runtimeId/index';

const DefinitionsRouteRoute = DefinitionsRouteRouteImport.update({
  id: '/definitions',
  path: '/definitions',
  getParentRoute: () => rootRouteImport,
} as any);
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any);
const DefinitionsIndexRoute = DefinitionsIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DefinitionsRouteRoute,
} as any);
const DefinitionsCreateIndexRoute = DefinitionsCreateIndexRouteImport.update({
  id: '/create/',
  path: '/create/',
  getParentRoute: () => DefinitionsRouteRoute,
} as any);
const DefinitionsDefinitionIdIndexRoute = DefinitionsDefinitionIdIndexRouteImport.update({
  id: '/$definitionId/',
  path: '/$definitionId/',
  getParentRoute: () => DefinitionsRouteRoute,
} as any);
const DefinitionsDefinitionIdRuntimeRuntimeIdIndexRoute =
  DefinitionsDefinitionIdRuntimeRuntimeIdIndexRouteImport.update({
    id: '/$definitionId/runtime/$runtimeId/',
    path: '/$definitionId/runtime/$runtimeId/',
    getParentRoute: () => DefinitionsRouteRoute,
  } as any);

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute;
  '/definitions': typeof DefinitionsRouteRouteWithChildren;
  '/definitions/': typeof DefinitionsIndexRoute;
  '/definitions/$definitionId': typeof DefinitionsDefinitionIdIndexRoute;
  '/definitions/create': typeof DefinitionsCreateIndexRoute;
  '/definitions/$definitionId/runtime/$runtimeId': typeof DefinitionsDefinitionIdRuntimeRuntimeIdIndexRoute;
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute;
  '/definitions': typeof DefinitionsIndexRoute;
  '/definitions/$definitionId': typeof DefinitionsDefinitionIdIndexRoute;
  '/definitions/create': typeof DefinitionsCreateIndexRoute;
  '/definitions/$definitionId/runtime/$runtimeId': typeof DefinitionsDefinitionIdRuntimeRuntimeIdIndexRoute;
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport;
  '/': typeof IndexRoute;
  '/definitions': typeof DefinitionsRouteRouteWithChildren;
  '/definitions/': typeof DefinitionsIndexRoute;
  '/definitions/$definitionId/': typeof DefinitionsDefinitionIdIndexRoute;
  '/definitions/create/': typeof DefinitionsCreateIndexRoute;
  '/definitions/$definitionId/runtime/$runtimeId/': typeof DefinitionsDefinitionIdRuntimeRuntimeIdIndexRoute;
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | '/'
    | '/definitions'
    | '/definitions/'
    | '/definitions/$definitionId'
    | '/definitions/create'
    | '/definitions/$definitionId/runtime/$runtimeId';
  fileRoutesByTo: FileRoutesByTo;
  to:
    | '/'
    | '/definitions'
    | '/definitions/$definitionId'
    | '/definitions/create'
    | '/definitions/$definitionId/runtime/$runtimeId';
  id:
    | '__root__'
    | '/'
    | '/definitions'
    | '/definitions/'
    | '/definitions/$definitionId/'
    | '/definitions/create/'
    | '/definitions/$definitionId/runtime/$runtimeId/';
  fileRoutesById: FileRoutesById;
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  DefinitionsRouteRoute: typeof DefinitionsRouteRouteWithChildren;
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/definitions': {
      id: '/definitions';
      path: '/definitions';
      fullPath: '/definitions';
      preLoaderRoute: typeof DefinitionsRouteRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/': {
      id: '/';
      path: '/';
      fullPath: '/';
      preLoaderRoute: typeof IndexRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/definitions/': {
      id: '/definitions/';
      path: '/';
      fullPath: '/definitions/';
      preLoaderRoute: typeof DefinitionsIndexRouteImport;
      parentRoute: typeof DefinitionsRouteRoute;
    };
    '/definitions/create/': {
      id: '/definitions/create/';
      path: '/create';
      fullPath: '/definitions/create';
      preLoaderRoute: typeof DefinitionsCreateIndexRouteImport;
      parentRoute: typeof DefinitionsRouteRoute;
    };
    '/definitions/$definitionId/': {
      id: '/definitions/$definitionId/';
      path: '/$definitionId';
      fullPath: '/definitions/$definitionId';
      preLoaderRoute: typeof DefinitionsDefinitionIdIndexRouteImport;
      parentRoute: typeof DefinitionsRouteRoute;
    };
    '/definitions/$definitionId/runtime/$runtimeId/': {
      id: '/definitions/$definitionId/runtime/$runtimeId/';
      path: '/$definitionId/runtime/$runtimeId';
      fullPath: '/definitions/$definitionId/runtime/$runtimeId';
      preLoaderRoute: typeof DefinitionsDefinitionIdRuntimeRuntimeIdIndexRouteImport;
      parentRoute: typeof DefinitionsRouteRoute;
    };
  }
}

interface DefinitionsRouteRouteChildren {
  DefinitionsIndexRoute: typeof DefinitionsIndexRoute;
  DefinitionsDefinitionIdIndexRoute: typeof DefinitionsDefinitionIdIndexRoute;
  DefinitionsCreateIndexRoute: typeof DefinitionsCreateIndexRoute;
  DefinitionsDefinitionIdRuntimeRuntimeIdIndexRoute: typeof DefinitionsDefinitionIdRuntimeRuntimeIdIndexRoute;
}

const DefinitionsRouteRouteChildren: DefinitionsRouteRouteChildren = {
  DefinitionsIndexRoute: DefinitionsIndexRoute,
  DefinitionsDefinitionIdIndexRoute: DefinitionsDefinitionIdIndexRoute,
  DefinitionsCreateIndexRoute: DefinitionsCreateIndexRoute,
  DefinitionsDefinitionIdRuntimeRuntimeIdIndexRoute: DefinitionsDefinitionIdRuntimeRuntimeIdIndexRoute,
};

const DefinitionsRouteRouteWithChildren = DefinitionsRouteRoute._addFileChildren(DefinitionsRouteRouteChildren);

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DefinitionsRouteRoute: DefinitionsRouteRouteWithChildren,
};
export const routeTree = rootRouteImport._addFileChildren(rootRouteChildren)._addFileTypes<FileRouteTypes>();
