/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as DefinitionsIndexRouteImport } from './routes/definitions/index'
import { Route as DefinitionsCreateIndexRouteImport } from './routes/definitions/create/index'
import { Route as DefinitionsDefinitionIdIndexRouteImport } from './routes/definitions/$definitionId/index'
import { Route as DefinitionsDefinitionIdRuntimeRuntimeIdIndexRouteImport } from './routes/definitions/$definitionId/runtime/$runtimeId/index'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const DefinitionsIndexRoute = DefinitionsIndexRouteImport.update({
  id: '/definitions/',
  path: '/definitions/',
  getParentRoute: () => rootRouteImport,
} as any)
const DefinitionsCreateIndexRoute = DefinitionsCreateIndexRouteImport.update({
  id: '/definitions/create/',
  path: '/definitions/create/',
  getParentRoute: () => rootRouteImport,
} as any)
const DefinitionsDefinitionIdIndexRoute =
  DefinitionsDefinitionIdIndexRouteImport.update({
    id: '/definitions/$definitionId/',
    path: '/definitions/$definitionId/',
    getParentRoute: () => rootRouteImport,
  } as any)
const DefinitionsDefinitionIdRuntimeRuntimeIdIndexRoute =
  DefinitionsDefinitionIdRuntimeRuntimeIdIndexRouteImport.update({
    id: '/definitions/$definitionId/runtime/$runtimeId/',
    path: '/definitions/$definitionId/runtime/$runtimeId/',
    getParentRoute: () => rootRouteImport,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/definitions': typeof DefinitionsIndexRoute
  '/definitions/$definitionId': typeof DefinitionsDefinitionIdIndexRoute
  '/definitions/create': typeof DefinitionsCreateIndexRoute
  '/definitions/$definitionId/runtime/$runtimeId': typeof DefinitionsDefinitionIdRuntimeRuntimeIdIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/definitions': typeof DefinitionsIndexRoute
  '/definitions/$definitionId': typeof DefinitionsDefinitionIdIndexRoute
  '/definitions/create': typeof DefinitionsCreateIndexRoute
  '/definitions/$definitionId/runtime/$runtimeId': typeof DefinitionsDefinitionIdRuntimeRuntimeIdIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/definitions/': typeof DefinitionsIndexRoute
  '/definitions/$definitionId/': typeof DefinitionsDefinitionIdIndexRoute
  '/definitions/create/': typeof DefinitionsCreateIndexRoute
  '/definitions/$definitionId/runtime/$runtimeId/': typeof DefinitionsDefinitionIdRuntimeRuntimeIdIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/definitions'
    | '/definitions/$definitionId'
    | '/definitions/create'
    | '/definitions/$definitionId/runtime/$runtimeId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/definitions'
    | '/definitions/$definitionId'
    | '/definitions/create'
    | '/definitions/$definitionId/runtime/$runtimeId'
  id:
    | '__root__'
    | '/'
    | '/definitions/'
    | '/definitions/$definitionId/'
    | '/definitions/create/'
    | '/definitions/$definitionId/runtime/$runtimeId/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DefinitionsIndexRoute: typeof DefinitionsIndexRoute
  DefinitionsDefinitionIdIndexRoute: typeof DefinitionsDefinitionIdIndexRoute
  DefinitionsCreateIndexRoute: typeof DefinitionsCreateIndexRoute
  DefinitionsDefinitionIdRuntimeRuntimeIdIndexRoute: typeof DefinitionsDefinitionIdRuntimeRuntimeIdIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/definitions/': {
      id: '/definitions/'
      path: '/definitions'
      fullPath: '/definitions'
      preLoaderRoute: typeof DefinitionsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/definitions/create/': {
      id: '/definitions/create/'
      path: '/definitions/create'
      fullPath: '/definitions/create'
      preLoaderRoute: typeof DefinitionsCreateIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/definitions/$definitionId/': {
      id: '/definitions/$definitionId/'
      path: '/definitions/$definitionId'
      fullPath: '/definitions/$definitionId'
      preLoaderRoute: typeof DefinitionsDefinitionIdIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/definitions/$definitionId/runtime/$runtimeId/': {
      id: '/definitions/$definitionId/runtime/$runtimeId/'
      path: '/definitions/$definitionId/runtime/$runtimeId'
      fullPath: '/definitions/$definitionId/runtime/$runtimeId'
      preLoaderRoute: typeof DefinitionsDefinitionIdRuntimeRuntimeIdIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DefinitionsIndexRoute: DefinitionsIndexRoute,
  DefinitionsDefinitionIdIndexRoute: DefinitionsDefinitionIdIndexRoute,
  DefinitionsCreateIndexRoute: DefinitionsCreateIndexRoute,
  DefinitionsDefinitionIdRuntimeRuntimeIdIndexRoute:
    DefinitionsDefinitionIdRuntimeRuntimeIdIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
